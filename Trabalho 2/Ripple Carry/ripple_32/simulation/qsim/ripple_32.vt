// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/23/2018 01:07:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ripple_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ripple_32_vlg_sample_tst(
	X,
	Y,
	sampler_tx
);
input [31:0] X;
input [31:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ripple_32_vlg_check_tst (
	COUT,
	S,
	sampler_rx
);
input  COUT;
input [31:0] S;
input sampler_rx;

reg  COUT_expected;
reg [31:0] S_expected;

reg  COUT_prev;
reg [31:0] S_prev;

reg  COUT_expected_prev;
reg [31:0] S_expected_prev;

reg  last_COUT_exp;
reg [31:0] last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	COUT_prev = COUT;
	S_prev = S;
end

// update expected /o prevs

always @(trigger)
begin
	COUT_expected_prev = COUT_expected;
	S_expected_prev = S_expected;
end



// expected COUT
initial
begin
	COUT_expected = 1'bX;
end 
// expected S[ 31 ]
initial
begin
	S_expected[31] = 1'bX;
end 
// expected S[ 30 ]
initial
begin
	S_expected[30] = 1'bX;
end 
// expected S[ 29 ]
initial
begin
	S_expected[29] = 1'bX;
end 
// expected S[ 28 ]
initial
begin
	S_expected[28] = 1'bX;
end 
// expected S[ 27 ]
initial
begin
	S_expected[27] = 1'bX;
end 
// expected S[ 26 ]
initial
begin
	S_expected[26] = 1'bX;
end 
// expected S[ 25 ]
initial
begin
	S_expected[25] = 1'bX;
end 
// expected S[ 24 ]
initial
begin
	S_expected[24] = 1'bX;
end 
// expected S[ 23 ]
initial
begin
	S_expected[23] = 1'bX;
end 
// expected S[ 22 ]
initial
begin
	S_expected[22] = 1'bX;
end 
// expected S[ 21 ]
initial
begin
	S_expected[21] = 1'bX;
end 
// expected S[ 20 ]
initial
begin
	S_expected[20] = 1'bX;
end 
// expected S[ 19 ]
initial
begin
	S_expected[19] = 1'bX;
end 
// expected S[ 18 ]
initial
begin
	S_expected[18] = 1'bX;
end 
// expected S[ 17 ]
initial
begin
	S_expected[17] = 1'bX;
end 
// expected S[ 16 ]
initial
begin
	S_expected[16] = 1'bX;
end 
// expected S[ 15 ]
initial
begin
	S_expected[15] = 1'bX;
end 
// expected S[ 14 ]
initial
begin
	S_expected[14] = 1'bX;
end 
// expected S[ 13 ]
initial
begin
	S_expected[13] = 1'bX;
end 
// expected S[ 12 ]
initial
begin
	S_expected[12] = 1'bX;
end 
// expected S[ 11 ]
initial
begin
	S_expected[11] = 1'bX;
end 
// expected S[ 10 ]
initial
begin
	S_expected[10] = 1'bX;
end 
// expected S[ 9 ]
initial
begin
	S_expected[9] = 1'bX;
end 
// expected S[ 8 ]
initial
begin
	S_expected[8] = 1'bX;
end 
// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'bX;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// generate trigger
always @(COUT_expected or COUT or S_expected or S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected COUT = %b | expected S = %b | ",COUT_expected_prev,S_expected_prev);
	$display("| real COUT = %b | real S = %b | ",COUT_prev,S_prev);
`endif
	if (
		( COUT_expected_prev !== 1'bx ) && ( COUT_prev !== COUT_expected_prev )
		&& ((COUT_expected_prev !== last_COUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUT_expected_prev);
		$display ("     Real value = %b", COUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COUT_exp = COUT_expected_prev;
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( S_expected_prev[8] !== 1'bx ) && ( S_prev[8] !== S_expected_prev[8] )
		&& ((S_expected_prev[8] !== last_S_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[8] = S_expected_prev[8];
	end
	if (
		( S_expected_prev[9] !== 1'bx ) && ( S_prev[9] !== S_expected_prev[9] )
		&& ((S_expected_prev[9] !== last_S_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[9] = S_expected_prev[9];
	end
	if (
		( S_expected_prev[10] !== 1'bx ) && ( S_prev[10] !== S_expected_prev[10] )
		&& ((S_expected_prev[10] !== last_S_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[10] = S_expected_prev[10];
	end
	if (
		( S_expected_prev[11] !== 1'bx ) && ( S_prev[11] !== S_expected_prev[11] )
		&& ((S_expected_prev[11] !== last_S_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[11] = S_expected_prev[11];
	end
	if (
		( S_expected_prev[12] !== 1'bx ) && ( S_prev[12] !== S_expected_prev[12] )
		&& ((S_expected_prev[12] !== last_S_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[12] = S_expected_prev[12];
	end
	if (
		( S_expected_prev[13] !== 1'bx ) && ( S_prev[13] !== S_expected_prev[13] )
		&& ((S_expected_prev[13] !== last_S_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[13] = S_expected_prev[13];
	end
	if (
		( S_expected_prev[14] !== 1'bx ) && ( S_prev[14] !== S_expected_prev[14] )
		&& ((S_expected_prev[14] !== last_S_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[14] = S_expected_prev[14];
	end
	if (
		( S_expected_prev[15] !== 1'bx ) && ( S_prev[15] !== S_expected_prev[15] )
		&& ((S_expected_prev[15] !== last_S_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[15] = S_expected_prev[15];
	end
	if (
		( S_expected_prev[16] !== 1'bx ) && ( S_prev[16] !== S_expected_prev[16] )
		&& ((S_expected_prev[16] !== last_S_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[16] = S_expected_prev[16];
	end
	if (
		( S_expected_prev[17] !== 1'bx ) && ( S_prev[17] !== S_expected_prev[17] )
		&& ((S_expected_prev[17] !== last_S_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[17] = S_expected_prev[17];
	end
	if (
		( S_expected_prev[18] !== 1'bx ) && ( S_prev[18] !== S_expected_prev[18] )
		&& ((S_expected_prev[18] !== last_S_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[18] = S_expected_prev[18];
	end
	if (
		( S_expected_prev[19] !== 1'bx ) && ( S_prev[19] !== S_expected_prev[19] )
		&& ((S_expected_prev[19] !== last_S_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[19] = S_expected_prev[19];
	end
	if (
		( S_expected_prev[20] !== 1'bx ) && ( S_prev[20] !== S_expected_prev[20] )
		&& ((S_expected_prev[20] !== last_S_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[20] = S_expected_prev[20];
	end
	if (
		( S_expected_prev[21] !== 1'bx ) && ( S_prev[21] !== S_expected_prev[21] )
		&& ((S_expected_prev[21] !== last_S_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[21] = S_expected_prev[21];
	end
	if (
		( S_expected_prev[22] !== 1'bx ) && ( S_prev[22] !== S_expected_prev[22] )
		&& ((S_expected_prev[22] !== last_S_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[22] = S_expected_prev[22];
	end
	if (
		( S_expected_prev[23] !== 1'bx ) && ( S_prev[23] !== S_expected_prev[23] )
		&& ((S_expected_prev[23] !== last_S_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[23] = S_expected_prev[23];
	end
	if (
		( S_expected_prev[24] !== 1'bx ) && ( S_prev[24] !== S_expected_prev[24] )
		&& ((S_expected_prev[24] !== last_S_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[24] = S_expected_prev[24];
	end
	if (
		( S_expected_prev[25] !== 1'bx ) && ( S_prev[25] !== S_expected_prev[25] )
		&& ((S_expected_prev[25] !== last_S_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[25] = S_expected_prev[25];
	end
	if (
		( S_expected_prev[26] !== 1'bx ) && ( S_prev[26] !== S_expected_prev[26] )
		&& ((S_expected_prev[26] !== last_S_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[26] = S_expected_prev[26];
	end
	if (
		( S_expected_prev[27] !== 1'bx ) && ( S_prev[27] !== S_expected_prev[27] )
		&& ((S_expected_prev[27] !== last_S_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[27] = S_expected_prev[27];
	end
	if (
		( S_expected_prev[28] !== 1'bx ) && ( S_prev[28] !== S_expected_prev[28] )
		&& ((S_expected_prev[28] !== last_S_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[28] = S_expected_prev[28];
	end
	if (
		( S_expected_prev[29] !== 1'bx ) && ( S_prev[29] !== S_expected_prev[29] )
		&& ((S_expected_prev[29] !== last_S_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[29] = S_expected_prev[29];
	end
	if (
		( S_expected_prev[30] !== 1'bx ) && ( S_prev[30] !== S_expected_prev[30] )
		&& ((S_expected_prev[30] !== last_S_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[30] = S_expected_prev[30];
	end
	if (
		( S_expected_prev[31] !== 1'bx ) && ( S_prev[31] !== S_expected_prev[31] )
		&& ((S_expected_prev[31] !== last_S_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp[31] = S_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ripple_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] X;
reg [31:0] Y;
// wires                                               
wire COUT;
wire [31:0] S;

wire sampler;                             

// assign statements (if any)                          
ripple_32 i1 (
// port map - connection between master ports and signals/registers   
	.COUT(COUT),
	.S(S),
	.X(X),
	.Y(Y)
);
// X[ 31 ]
initial
begin
	X[31] = 1'b0;
end 
// X[ 30 ]
initial
begin
	X[30] = 1'b0;
end 
// X[ 29 ]
initial
begin
	X[29] = 1'b0;
end 
// X[ 28 ]
initial
begin
	X[28] = 1'b0;
end 
// X[ 27 ]
initial
begin
	X[27] = 1'b0;
end 
// X[ 26 ]
initial
begin
	X[26] = 1'b0;
end 
// X[ 25 ]
initial
begin
	X[25] = 1'b0;
end 
// X[ 24 ]
initial
begin
	X[24] = 1'b1;
end 
// X[ 23 ]
initial
begin
	X[23] = 1'b1;
end 
// X[ 22 ]
initial
begin
	X[22] = 1'b0;
end 
// X[ 21 ]
initial
begin
	X[21] = 1'b0;
end 
// X[ 20 ]
initial
begin
	X[20] = 1'b0;
end 
// X[ 19 ]
initial
begin
	X[19] = 1'b0;
end 
// X[ 18 ]
initial
begin
	X[18] = 1'b1;
end 
// X[ 17 ]
initial
begin
	X[17] = 1'b1;
end 
// X[ 16 ]
initial
begin
	X[16] = 1'b1;
end 
// X[ 15 ]
initial
begin
	X[15] = 1'b0;
end 
// X[ 14 ]
initial
begin
	X[14] = 1'b1;
end 
// X[ 13 ]
initial
begin
	X[13] = 1'b0;
end 
// X[ 12 ]
initial
begin
	X[12] = 1'b0;
end 
// X[ 11 ]
initial
begin
	X[11] = 1'b0;
end 
// X[ 10 ]
initial
begin
	X[10] = 1'b1;
end 
// X[ 9 ]
initial
begin
	X[9] = 1'b0;
end 
// X[ 8 ]
initial
begin
	X[8] = 1'b1;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b0;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b1;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b1;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b1;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b1;
end 
// Y[ 31 ]
initial
begin
	Y[31] = 1'b0;
end 
// Y[ 30 ]
initial
begin
	Y[30] = 1'b0;
end 
// Y[ 29 ]
initial
begin
	Y[29] = 1'b0;
end 
// Y[ 28 ]
initial
begin
	Y[28] = 1'b0;
end 
// Y[ 27 ]
initial
begin
	Y[27] = 1'b0;
end 
// Y[ 26 ]
initial
begin
	Y[26] = 1'b0;
end 
// Y[ 25 ]
initial
begin
	Y[25] = 1'b0;
end 
// Y[ 24 ]
initial
begin
	Y[24] = 1'b0;
end 
// Y[ 23 ]
initial
begin
	Y[23] = 1'b0;
end 
// Y[ 22 ]
initial
begin
	Y[22] = 1'b0;
end 
// Y[ 21 ]
initial
begin
	Y[21] = 1'b0;
end 
// Y[ 20 ]
initial
begin
	Y[20] = 1'b1;
end 
// Y[ 19 ]
initial
begin
	Y[19] = 1'b0;
end 
// Y[ 18 ]
initial
begin
	Y[18] = 1'b0;
end 
// Y[ 17 ]
initial
begin
	Y[17] = 1'b1;
end 
// Y[ 16 ]
initial
begin
	Y[16] = 1'b1;
end 
// Y[ 15 ]
initial
begin
	Y[15] = 1'b0;
end 
// Y[ 14 ]
initial
begin
	Y[14] = 1'b0;
end 
// Y[ 13 ]
initial
begin
	Y[13] = 1'b1;
end 
// Y[ 12 ]
initial
begin
	Y[12] = 1'b0;
end 
// Y[ 11 ]
initial
begin
	Y[11] = 1'b1;
end 
// Y[ 10 ]
initial
begin
	Y[10] = 1'b0;
end 
// Y[ 9 ]
initial
begin
	Y[9] = 1'b1;
end 
// Y[ 8 ]
initial
begin
	Y[8] = 1'b1;
end 
// Y[ 7 ]
initial
begin
	Y[7] = 1'b0;
end 
// Y[ 6 ]
initial
begin
	Y[6] = 1'b1;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b0;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b0;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b0;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b0;
end 

ripple_32_vlg_sample_tst tb_sample (
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

ripple_32_vlg_check_tst tb_out(
	.COUT(COUT),
	.S(S),
	.sampler_rx(sampler)
);
endmodule

